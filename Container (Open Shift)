Isolated ENV in Container based on Linux Kernal :
  1. namespaces   = isolates resources
    - Have own Objects : Pods, services, replication controllers
    - Have own Policies : RBAC
    - Constrains : Quotas for onjects (Pods, ReplicationControllers, ResourceQuotas, Services, Secrets, ConfigMaps, PersistentVolumeClaims)
      ex: 
        - Resource quotas : hard resource usage limits per project
          - request 
          - limits 
        - ClusterResourceQuota : enumerates hard resource usage limits for users across the cluster
    - Service accounts : Users that act automatically with access to project objects
  2. controlgroup = limit resources
  3. Seccomp      = how to use proccess
  4. SELinux      = protect process from each other
  
Container Architecture
  1. Image        = template for container include runtime env and all library and config file
      ex : registry_name/usern_name/image_name:tag
  2. Image Repo   = where image is store
  3. Podmad       = managing container and image registries
  
Enterprices Need :
  1. Easy communication between large services
  2. Limit resources on application
  3. Scaling application
  4. Health Check
  5. Gradually roll out of new release
  
Kontainer Orchestration (Kubernetes and Openshift)
  Purpose
  1. Orchestration
  2. Scheduling
  3. Isolation
  Features
  1. Service discovery and load balancing
  2. Horizontal Scaling
  3. Self Healing
  4. Automated rollout and rollback
  5. Secret and config management
  6. Operator
  
POD
  1. contain one or more container to be deployed
  2. shared resources, volume, and ip address for container inside
  3. smallest deployment unit in OpenShift
  
Service
  1. Logical set of pods and access policy
  2. Provide permanen internal IP address and Hostname
  3. Links application components together
  
Labels
  1. Used to organized, group, or select API objects
  2. Make services to referenced to group of pods
  3. lables written in metadata
  4. leabes written in simple key-values
    ex:
    labels:
      key1: value1
      key2: value2

Master Node
Component
  ETCD
    1. ETCD is distributed key-value store for comparing desired and current state
      - RBAC (Roles Based Access Control)
      - Application Environtment Information
      - Non-application user data
  Kubernetes/Openshift API server
    1. API end point to interact with system
    2. API requests SSL-Encrypted and Authenticated
    3. Autorization handled via fine-grained RBAC
    4. Can tied with external identity management system
      such as
      1. LDAP
      2. Active Directory
      3. OAuth providers (Github / Google)
  Scheduler
    1. Determining pod placement based on CPU, memory worker nodes
    2. Spread pod replicas between worker nodes
    Scheduler Configuration
      1. Able to use real-world topology for openshift deployment
      2. Handles complex scenarios for scheduling workloads
      3. Uses configuration in combination with node groups and labels (ex. zones)
    ReplicaSet(kubernetes) / Replica Controller(OpenShift)
      1. Ensures specified number of pod replicas
    Deployment and DeploymentConfig
      1. Define how to roll out new version of pods
      2. Identity (Image name, Number of Replicas, Labe for target deployment nodes
      3. Update pods based on Version, Strategy, Change triggers
      4. Create ReplicaSets or Replication Controllers
  Cluster Management Services
  Operator Lifecycle Manager (OLM)
    1. Is pods with operator code withinteract with Kubernetes API server
    2. Run "reconciliation loops" to check on application service
    3. Manage all deployed resources and the application
    4. Act as applicitaion-specific controllers
    5. Extend Kubernetes API with Custom Resource Definition (CRD)
  Web Console
  
Services
  1. Monitoring
    Health and Scaling
    1. Based on user configuration pod probes for liveness and readiness
    2. Pod may configured to automatically scale based on CPU
  2. Logging
  3. OS tuning
  4. Software-defined networking (SDN)
  5. DNS
    Routing Layer
      1. Provides external clients access to application
      2. Automated load balancing and auto routing around unhealthy pods
      Route
      1. Expose service by giving it externally reachable hostname
      2. Consist of route name, service selector, and security configuration
      Router
      1. Multi-tier application easily deployed
      2. Router container can run on any node host in env (wildcard DNS entry)
      3. Ingress point for traffic
  6. Kubelet

USER EXPERIENCE
  Admin Prespective
    1. Overview System
    2. Status, Activity, Events, Inventory, Capacity, and Utilization
    3. Resources
    4. Logging and Metric
    5. Advance Setting
      ex : Updates, Operators, CRDs, role bindings, resource quota
  Templates, Operators, and Helm for Deploy
    1. Templates
      - Can only create resources
      - Cannot Manage or Delete Resource
      - Not Associated with pod
    2. Operators
      - Create, manage, and delete resources
      - Implemented by operator pods
    3. Helm3
      - Package of templates
      - How application packaged
      - How package installed
  
  APPLICATION DEPLOYMENT
    1. DEVOPS and CI/CD
      - Approach to culture, automation, and platform design
      - Increase speed and flexibillity
      - Improves communication and consensus
      - Accelerates time-to-market
    2. Topology
          Current Technology                                  Evolving Technology
          Platform-as-a-Service (PaaS)                        Unopinionated Container Platform
          Complicated cluster deployment                      Cluster-managed self-deployment
          Business value interruption for platform updates    Over-the-air updates
          Custom configuration automation                     Immutable infrastructure
          Infrastructure-as-a-Service (IaaS)                  Cluster-driven infrastructure
          Simple application deployment                       OpenShift Service Mesh-driven complex topologies
          Microservices                                       Red Hat Openshift Serverless computing
          Container from internate                            Validated and supported runtime and middleware container
          Bespoke infrastructure deployment consulting        DevOps consulting and RH Open Innovation Labs
    3. Developer VS Operations
          Developers Care                                     Operations
          Building App                                        Deploying App
          Automating test                                     Managing App, Infrastructure
          Continuous Integration                              reliability
          Performance Tuning                                  Security
          Debugging                                           Complience
    4. Deployments
      - Fine-grained management over applications (Based on Deployment Configuration[DC])
      - Template form (Templates, Helm, Kustomize)
      - In response to deployment configuration, deployment system creates replication controller to run app
      Term
      Kubernetes "deployment" <==> OpenShift "deployment configuration"
      Kubernetes "ReplicaSet" <==> Openshift "replication controller"
    5. Features in Deployment System
      - Deployment Configuration (DC) = Template for running App
        - Contain :
          - version number = incremented each time new replication controller (Kubernetes ReplicaSet) created from configuration
          - cause of last deployed replication controller
        - Readiness check (retries until times out if readiness check fails)
      - Triggers that drive automated deployment in response to events
      - Strategies to transition from previous version to new version
      - Rollback to previous version in case of deployment failure (Manual or Automatic)
        via REST API, CLI, or Web Console (manual)
        via Auto rollback to last successful in failed deploy
      - Manual replication scaling and autoscaling
    6. Strategy
        Rolling Deployment Strategy
          - Performs rolling update
          - Support life-cycle hooks for injecting code into deployment process
          - Waits for pods to pass readiness check
          - Defaults strategy specified in deployment configuration
          - Steps :
            1. Execute pre life-cycle hook (readiness checks)
            2. Scale up new deployment by one or more pods (based on max Surge)
            3. Scale down old deployment by one or more pods (based on max Unavailable value)
            4. Repeat scaling until new deployment reaches desired replica count and old deployment scales to zero
            5. Execute any post life-cycle hooks
        Recreate Strategy
          - Has basic rollout behaviour
          - Supports life-cycle hooks for injecting code into deployment process
          - Steps
            1. Execute pre life-cycle hook
            2. Scale down previous deployment to zero
            3. Scale up new deployment
            4. Execute post life-cycle hook
    7. Continuous Integration
      1. Workflow
          1. Verifies build integrity
            - Check if source code can be pulled from repository and built for deployment
            - Build process may include compiling, packaging, configuring software
          2. Validates test reults
            - Runs tests created by developers in prod-like env
            - Verifies source code not broken as side effect of commit
          3. Check integration among multiple systems
            - Uses integration tests to validate systems integration used by software
          4. Identifies problems
            - Alerts affected teams to fix problems
      2. Benefits
          1. Rapid feedback
            - Status notification after build execcutes
            - Reduces time to discover and fix new defects
          2. Reduce risk
            - Integrating many times a day reduces risks in projects
            - Software health measureable using unit testing, code inspection reports
          3. Team ownership
            - No longer "us versus them"
            - Everyone receives regular reports on build status
            - Enables greater project visibility, everyone can spot trens and make effective decisions
            - Create confidence to add features to project
            - Everyone on board with current project health
          4. Building deployable software
            - Build process generates deployable software
            - Create software that can be deployed at any time
          5. Automated process
            - Automating build saves time, costs, effort
            - Process runs same every time
            - Frees developers to do more high-value work
      3. Best Practices
         - Maintain code repository
         - Automate build
         - Make build self-testing
         - Make sure everyone commits every day
         - Keep build fast
         - Test in production clone
         - Make getting deliverables easy
         - Make sure everyone can view build results
    
    
    
    
    
    
  
  
