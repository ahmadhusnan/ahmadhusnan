ANSIBLE

ARCHITECTURE
 	Control Node (Admin laptop, etc)
  	 	Have Ansible project files
  	Managed Hosts
     	Collected in called inventory (static or dynamic text)
	Script Type
		Playbook (series of tasks in YAML format)
			Task (run a module in python based, etc)
			Declarative type
			*Attention
			Permission, mounted file system
			
RED HAT ANSIBLE TOWER
	Enterprise framework Ansible
	to
		control access playbooks
		manage inventory
	provide
		web UI
		RESTful API
	
USE CASES
	1. Config Management and Deployment
	2. Application Deployment
	3. Provisioning (RHAT)
		ex. 
			PXE booting
			kickstarting bare-metal  or VM
			creating VM (from template)
			creating cloud instance (from template)
	4. CI/CD (Playbook)
	5. Security and Compliance
	6. Orchestration (interact multiple configuration)
	
INSTALL ANSIBLE
	Prerequesities
		1. Python 2 (RHEL 7) or Python 3 (RHEL 8)
			yum list installed python
		2. sshpass
		3. Python3-markupsafe
		4. Python3-jinja2
		5. Python3-babel
		6. Python3-jmespath
		7. python*-winrm (windows env) package
		8. libselinux-python
		
		Windows Server
		1. PowerShell 3.0
		2. .NET Framework 4.0
		
	Repositories Ansible (RHEL 8)
		
	Install
		subscription-manager register
		subscription-manager refresh
		subscription-manager list --available
		subscription-manager attach --pool=<pool id here of ansible subscription>
		*subscription-manager repos --enable rhel-7-server-ansible-2-rpms (RHEL7)
		subscription-manager repos --enable satellite-tools-6.6-for-rhel-8-x86_64-rpms
		subscription-manager repos --enable ansible-2-for-rhel-8-x86_64-rpms (RHEL8)
		yum install ansible
		
		
ANSIBLE CONFIGURATION
	Default path
	etc path
		/etc/ansible/ansible.cfg (defaults, prio=3)
	homedir
		~/.ansible.cfg (user config, prio=2)
	current dir
		./ansible.cfg (user config, prio=1) *recommended
	
	check config file location
		ansible --version or -v
		
	ex. ansible.cfg
		[defaults]
		inventory = ./inventory *directory config
		remote_user = user
		ask_pass = false >>> SSH public key authentication
		ansible_conncection: winrm / smart / etc
		ansible_port: 5986
	
		[privilage_escalation]
		become = true >>> auto switch user
		become_method = sudo
		become_user = root
		become_ask_pass = false
	
	*Set useransible to have no password
	/etc/sudoers/
		## password-less sudo for Ansible user
		someuser ALL=(ALL) NOPASSWD:ALL

NETWORK DEVICE CONFIGURATION (/etc/ansible/hosts)*use different path recommended
	Technique in control node
		1. CLI over SSH
		2. XML over SSH
		3. API over HTTP(S)
	
	constum dir inventory command
	ansible <host-or-group> -i <dirname> --list-hosts
	*run in right directory
	
	ex.
	[group hosts]
	web1.example.com
	web2.example.com
	
	[group2 hosts]
	db1.example.com
	db2.example.com
	
	[group3 hosts]
	web1.example.com
	db1.example.com
	
	[group:nested]
	canada
	usa
	
	ex.
	[group]
	washington[1:2].example.com

AD HOC COMMAND
	COMMAND
	ansible <argument/hosts> <argument name/sub program from argument/module> [option for argument name] [option for argument name]
	ex.
	1. ansible <hosts> -m module [-a 'module arguments'] [-i inventory]
	2. ansible all -m ping
	3. ansible <hosts> -m ping
	4. ansible -m user -a 'name=newbie uid=4000 state=present' hostname
		check system module in ansible website

	MODULE NAME	DESCRIPTION
	k8s 		Manages Kubernetes objects. This module has access to all Kubernetes APIs, allowing you to create, update, or delete Kubernetes objects.
	k8s_info 	Retrieves information about Kubernetes objects.
	k8s_scale 	Sets a new size for a Deployment, ReplicaSet, Replication Controller, or Job.
		dependencies
		     openshift >= 0.6
			PyYAML >= 3.11
	k8s_auth 	Authenticates to Kubernetes clusters which require an explicit login step, like OpenShift. This module returns an api_key that the other modules can use for authentication.
		dependencies
			urllib3
			requests
			requests-oauthlib 
	k8s_service 	Manages Services on Kubernetes.

	MODULE CATEGORY					MODULES
	Files Modules					copy [argument] >>> 'argument'
							file [argument] 
							lineinfile [argument] 
							synchronize [argument]
	Software package modules			package [argument] 
							yum [argument] 
							apt [argument] 
							dnf [argument] 
							gem [argument]
							pip [argument]
	System modules					firewalld [argument]
							reboot [argument]
							service[argument]
							user [argument]
	Net Tools					get_url [argument]
							nmcli [argument]
							uri [argument]
	*argument sometimes mandatory

	MODULE AUTH OPTION
		- If no connection options are provided, 
		  the openshift client attempts to load the default configuration file from ~/.kube/config.
		- To authenticate via by HTTP Basic Auth, provide the host, username, and password module parameters. 
		  The optional proxy module parameter connects through an HTTP proxy.
		- The k8s_auth module provides an authentication token that can be used with the api_key module parameter to authenticate with the API.
		- Verify SSL certificates for the API server using the ca_cert, client_cert, and client_key module parameters. 
		  Toggle certificate validation with the validate_certs module parameter.

ARBITARY COMMAND
	command run speciefied as an argument to the module using -a option
	ansible <hosts> -m command -a </pathofcomman(bin)>
	ansible <hosts> -m shell -a
	ex.
	ansible mymanagehost -m command -a /usr/bin/hostname -o (output readability)
	
	CONFIGURATION FILE DIRECTIVES			COMMAND-LINE OPTION
	Inventory					-i
	Remote_user					-u
	Become						--become,-b
	Become_method					--become-method
	Become_user					--become-user
	Become_ask_pass					--ask-become-pass, -K
	*check in ansible --help
	
IMPLEMENTING PLAYBOOKS

	AD HOC VERSION
	ansible -m user -a "new=newbie uid=4000 state=present"
	
	PLAYBOOK VERSION (YAML.yml)
	---
	- name: Configure important user consistently
	  hosts: servera.lab.example.com
	  tasks:
	    - name: newbie exist with UID 4000
	      user:
	         name: newbie
		 uid: 4000
		 state: present
		 
	    - name: web server is enabled
	      service:
	      	name: httpd
		enabled: true
		
	   - name: NTP server is enabled
	     service:
	        name: chronyd
		enabled:true
		
	   - name: Postflix is enabled
	     service:
	        name: postflix
		enabled: true
	...
	* - is item
	* no - is keys-value pairs
	* - name is like label (attribute) for purpose of the task 
	* tab indentation is not allowed
	
	create custom setting of vi editor
	add line in $HOME/.vimrc
		autocmd FileType yaml setlocal ai ts=2 sw=2 et
		
RUNNING PLAYBOOK
	RUN
		ansible-playbok -v -vv -vvv -vvvv <configfilename.yml>
	SYNTAX CHECK
		ansible-playbook --syntax-check webserver.yml
	DRY RUN (info bakal ada perubahan apa, gk langsung implementasi)
		ansible-playbook -C webserver.yml
	ANSIBLE CONFIG (/etc/ansible/ansible.cfg or )
		remote_user: remoteuser
		become: true
		become_method: sudo
		become_user: privileged_user
	MANAGING VARIABLES
		VALID VARIABLE NAMES = KATASATU_KATADUA
		Global Scope: From Ansible configuration
		Play Scope: Play and related structures
			--- DEFINE
			  - hosts: all
			    vars:
			      user: joe
			    vars_files:
			      vars/users.yaml
			--- USING VARS
			- name: Create the user {{ user }}
			  user:
			    # This line will create the user named joe
			    name: "{{ user }}"
		Host Scope: set in inventory (fact gathering, or registered tasks)
			[servers:children]
			servers1
			servers2

			[servers:vars]
			user=joe
	MANAGING SECRET (ANSIBLE-VAULT)
		- ansible-vault create secret .yml
			New Vault password: <password>
			Confirm New Vault password: <password>
		- ansible-vault create --vault-password-file=vault-pass secret.yml
		- ansible-vault view secret.yml
		- ansible-vault edit
		- ansible-vault encrypt secret1.yml secret2.yml
		- ansible-vault decrypt secret1.yml secret2.yml
		- ansible-vault rekey secret.yml
		- ansible-vault rekey > --new-vault-password-file=NEW_VAULT_PASSWORD_FILE secret.yml
			- ansible-playbook --vault-id @prompt site.yml
			- ansible-playbook --ask-vault-pass site.yml
			- ansible-playbook --vault-password-file=vault-pw-file site.yml
	MANAGING FACTS
		- gather_facts: yes
		Some of the facts gathered for a managed host might include:
			• The host name.
			• The kernel version.
			• The network interfaces.
			• The IP addresses.
			• The version of the operating system.
			• Various environment variables.
			• The number of CPUs.
			• The available or free memory.
			• The available disk space.
		/facts.yml
		---
		- name: Fact dump
		  hosts: all
		  tasks:
		    - name: Print all facts
		      debug:
		        var: ansible-facts
		FACT 						VARIABLE
		Short host name 				ansible_facts['hostname'] / ansible_facts.hostname
		Fully qualified domain name 			ansible_facts['fqdn'] / ansible_facts.fqdn
		Main IPv4 address (based on routing)		ansible_facts['default_ipv4']['address'] / ansible_facts.default_ipv4.address
		List of the names of all network interfaces	ansible_facts['interfaces'] / ansible_facts.interfaces
		Size of the /dev/vda1 disk partition		ansible_facts['devices']['vda']['partitions']['vda1']['size'] / ansible_facts.devices.vda.partitions.vda1.size
		List of DNS servers 				ansible_facts['dns']['nameservers'] / ansible_facts.dns.nameservers
		Version of the currently running kernel		ansible_facts['kernel'] / ansible_facts.kernel
		/facts.yml
		---
		- name: all
		  tasks:
		    - name: Print various Ansible facts
		      debug:
		        msg: >
                          The default IPv4 address of {{ ansible_facts.fqdn }}
			  is {{ ansible-facts.default_ipv4.address }}
		MAGIC VARIABLES
		hostvars: variables for managed hosts and can get the values for another managed host's variables
		group_names: lists all group the current managed host is in
		group: lists all group and hosts in the inventory
		inventory_hostname: hostname from inventory
	LOOPING AND CONDITIONAL TASKS
		---
		    - name: Postfix and Dovecot is running
		      service:
                        name: "{{ item }}"
                        state: started
                      loop:
                        - postfix
                        - dovecot
		or
		---
		  vars:
		    mail_service:
		      - postfix
                      - dovecot
		    - name: User Postfix and Dovecot are running
		      service:
		        name: "{{ item }}"
                        state: started
                      loop: "{{ mail_service }}"
  		---
		    - name: Users exist and are in the correct groups
		      user:
                        name: "{{ item.name }}"
                        state: present
                        groups: "{{ item.groups }}"
                      loop:
                        - name: jane
                          groups: wheel
                        - name: joe
                          groups: roo
		LOOP KEYWORD 			DESCRIPTION
		with_items			Behaves the same as the loop keyword for simple lists, such as a
						list of strings or a list of hashes/dictionaries. Unlike loop, if lists of
						lists are provided to with_items, they are flattened into a singlelevel list. 
						The loop variable item holds the list item used during each iteration.
		with_file			This keyword requires a list of control node file names. 
						The loop variable item holds the content of a corresponding file from the file
						list during each iteration.
		with_sequence 			Instead of requiring a list, this keyword requires parameters to
						generate a list of values based on a numeric sequence. The loop
						variable item holds the value of one of the generated items in the
						generated sequence during each iteration.
		CONDITIONALLY TASKS
		---
		- name: Test Variable is Defined Demo
		  hosts: all
		  vars:
		  my_service: httpd
		  tasks:
		    - name: "{{ my_service }} package is installed"
		      yum:
			name: "{{ my_service }}"
			when: my_service is defined
		EXAMPLE CONDITIONAL
		OPERATION 			EXAMPLE
		Equal (value is a string) 	ansible_machine == "x86_64"
		Equal (value is numeric) 	max_memory == 512
		Less than 			min_memory < 128
		Greater than 			min_memory > 256
		Less than or equal to 		min_memory <= 256
		Greater than or equal to 	min_memory >= 512
		Not equal to 			min_memory != 512
		Variable exists 		min_memory is defined
		Variable does not exist 	min_memory is not defined
		Boolean variable is true.	memory_available
		The values of 1, True, or
		yes evaluate to true. The
		values of 0, False, or no
		evaluate to false.
		Boolean variable is false. 	not memory_available
		First variable's value is	ansible_distribution in supported_distros
		present as a value in second
		variable's list
		ex.
		when: ansible_distribution == "RedHat" or ansible_distribution == "Fedora"
		when: ansible_distribution_version == "7.5" and ansible_kernel == "3.10.0-327.el7.x86_64"
		when:
		  - ansible_distribution_version == "7.5"
		  - ansible_kernel == "3.10.0-327.el7.x86_64"
		when: >
		    ( ansible_distribution == "RedHat" and
		      ansible_distribution_major_version == "7" )
		    or
		    ( ansible_distribution == "Fedora" and
		    ansible_distribution_major_version == "28" )
	ABSIBLE HANDLERS
	Tasks that respond to a notification triggered by other tasks by notify handlers (notify)
	---
	  tasks:
	    - name: copy demo.example.conf configuration template
	      template:
                src: /var/lib/templates/demo.example.conf.template
                dest: /etc/httpd/conf.d/demo.example.conf
              notify:
                - restart apache
              handlers:
                - name: restart apache
                  service:
                    name: httpd
                    state: restarted

	HANDLING TASK FAILURE
		1. Ignore Task Failure
		- name: Latest version of notapkg is installed
		  yum:
		    name: notapkg
		    state: latest
		    ignore_errors: yes
		2. Force execution of Handlers after Task Failure
		---
		- hosts: all
		  force_handlers: yes
		  tasks:
		    - name: a task which always notifies its handler
		      command: /bin/true
		      notify: restart the database
		    - name: a task which fails because the package doesn't exist
		      yum:
			name: notapkg
			state: latest
		  handlers:
		    - name: restart the database
		      service:
			name: mariadb
			state: restarted
		3. Specifying Task Failure Condition
		script that outputs an error message and use that message to define the failed state for the task.
		tasks:
		- name: Run user creation script
		  shell: /usr/local/bin/create_users.sh
		  register: command_result
		  failed_when: "'Password missing' in command_result.stdout"
		4. Specifying Task Changed Result
		- name: get Kerberos credentials as "admin"
		  shell: echo "{{ krb_admin_pass }}" | kinit -f admin
		  changed_when: false
		5. Block and Error handling
		• block: Defines the main tasks to run.
		• rescue: Defines the tasks to run if the tasks defined in the block clause fail.
		• always: Defines the tasks that will always run independently of the success or failure of tasks
		  defined in the block and rescue clauses.
		tasks:
		  - block:
		      - name: upgrade the database
			shell:
			  cmd: /usr/local/lib/upgrade-database
		    rescue:
		      - name: revert the database upgrade
			shell:
			  cmd: /usr/local/lib/revert-database
		    always:
		      - name: always restart the database
			service:
			  name: mariadb
			  state: restarted

	#MODIFYING AND COPYING FILES TO HOSTS
	MODULE NAME		MODULE DESCRIPTION
	blockinfile 		Insert, update, or remove a block of multiline text surrounded by
				customizable marker lines.
	copy 			Copy a file from the local or remote machine to a location on a
				managed host. Similar to the file module, the copy module can
				also set file attributes, including SELinux context.
	fetch 			This module works like the copy module, but in reverse. This module
				is used for fetching files from remote machines to the control node
				and storing them in a file tree, organized by host name.
	file 			Set attributes such as permissions, ownership, SELinux contexts,
				and time stamps of regular files, symlinks, hard links, and directories.
				This module can also create or remove regular files, symlinks,
				hard links, and directories. A number of other file-related modules
				support the same options to set attributes as the file module,
				including the copy module.
	lineinfile 		Ensure a particular line is in a file, or replace an existing line using
				a backreference regular expression. This module is primarily useful
				when you want to change a single line in a file.
	stat 			Retrieve status information for a file, similar to the Linux stat command
	synchronize 		A wrapper around the rsync command to make common tasks quick
				and easy. The synchronize module is not intended to provide
				access to the full power of the rsync command, but does make the
				most common invocations easier to implement. You may still need
				to call the rsync command directly via a run command module
				depending on your use case.
	MANAGE FILE = touch
	- name: Touch a file and set permissions 
	    file:
	    path: /path/to/file
	    owner: user1
	    group: group1
	    mode: 0640
	    state: touch
	output: $ ls -l file
		  -rw-r----- user1 group1 0 Nov 25 08:00 file
	
	MANAGE FILE ATTRIBUTES = chcon 
	- name: SELinux type is set to samba_share_t
	    file:
	    path: /path/to/samba_file
	    setype: samba_share_t
	output: $ ls -Z samba_file
		  -rw-r--r-- owner group unconfined_u:object_r:samba_share_t:s0 samba_file
	
	MANAGE SELINUX PERSISTENT = semanage fcontex
	- name: SELinux type is persistently set to samba_share_t
	  sefcontext:
            target: /path/to/samba_file
            setype: samba_share_t
            state: present
         output: ls -Z samba_file
		  -rw-r--r-- owner group unconfined_u:object_r:samba_share_t:s0 samba_file

	COPY AND EDIT FILES
	- name: Copy a file to managed hosts
	  copy:
	    src: file
	    dest: /path/to/file
	- name: Add a line of text to a file
	  lineinfile:
	    path: /path/to/file
            line: 'Add this line to the file'
	    state: present
	- name: Add additional lines to a file
	  blockinfile:
	    path: /path/to/file
	    block: |
	      First line in the additional block of text
	      Second line in the additional block of text
  	  state: present

	REMOVE FILE
	- name: Make sure a file does not exist on managed hosts
	  file:
	    dest: /path/to/file
	    state: absent

	CHECKSUM FILE & ETC PASSWD CHECK
	- name: Verify the checksum of a file
	  stat:
	  path: /path/to/file
	  checksum_algorithm: md5
	  register: result
	- debug
	    msg: "The checksum of the file is {{ result.stat.checksum }}"

	- name: Examine all stat output of /etc/passwd
	  hosts: localhost
	  tasks:
	    - name: stat /etc/passwd
	      stat:
	        path: /etc/passwd
	      register: results
	    - name: Display stat results
	      debug:
		var: results

	SYNC FILES
	- name: synchronize local file to remote files
	  synchronize:
	  src: file
	  dest: /path/to/file

	JINJA2 CUSTOM FILE
	expression : {{ EXPR }}
	loop/logic : {% EXPR %}
	text	   : {# /etc/hosts line #}
	ex.
		{# /etc/hosts line #}
		{{ ansible_facts.default_ipv4.address }} {{ ansible_facts.hostname }}
		--- /ansible_facts.date_time.date.jw
		Welcome to {{ ansible_facts.hostname }}.
		Today's date is: {{ ansible_facts.date_time.date }}.
		---
		  tasks:
		    - name: template render
		      template:
			src: /tmp/j2-template.j2
			dest: /tmp/dest-config-file.txt
	LOOP JINJA
	---
	{% for user in users %}
	{{ user }}
	{% endfor %}
	---
	{# for statement #}
	{% for myuser in users if not myuser == "root" %}
	User number {{loop.index}} - {{ myuser }}
	{% endfor %}
	---
	{% for myhost in groups['myhosts'] %}
	{{ myhost }}
	{% endfor %}
	---
	- name: /etc/hosts is up to date
	  hosts: all
	  gather_facts: yes
	  tasks:
	    - name: Deploy /etc/hosts
	      template:
		src: templates/hosts.j2
		dest: /etc/hosts
	--- /templates/hosts.j2
	{% for host in groups['all'] %}
	{{ hostvars[host]['ansible_facts']['default_ipv4']['address'] }} {{ hostvars[host]
	['ansible_facts']['fqdn'] }} {{ hostvars[host]['ansible_facts']['hostname'] }}
	{% endfor %}

	CONDITIONAL JINJA 
	{% if finished %}
	{{ result }}
	{% endif %}

	FILTER VARIABLE
	{{ output | to_json }}
	{{ output | to_yaml }}
	Built-in
	Ansible filters used to test return values include failed, changed, succeeded, and skipped.

	CONFIGURING PARALLELISM
	/ansible.cfg
	forks = 5
	ansble -f 5

	INCLUDING AND IMPORTING FILES
	---
	  tasks:
	    - name: Prepare the web server
	      import_playbook: web.yml
	    - name: Prepare the database server
	      import_playbook: db.yml

	INCLUDING TASKS
	---
	  tasks:
	  - import_tasks: webserver_tasks.yml
	---
	  tasks:
	    - name: Import task file and set variables
	      import_tasks: task.yml
	      vars:
		package: httpd
		service: service

	PLAYBOOKS WITH ROLES
	Structure user.example role
	user.example/	
	├── defaults
	│ └── main.yml
	├── files
	├── handlers
	│ └── main.yml
	├── meta
	│ └── main.yml
	├── README.md
	├── tasks
	│ └── main.yml
	├── templates
	├── tests
	│ ├── inventory
	│ └── test.yml
	└── vars
	  └── main.yml
	SUBDIRECTORY 		FUNCTION
	defaults		The main.yml file in this directory contains the default values of role
				variables that can be overwritten when the role is used
	files			This directory contains static files that are referenced by role tasks.
	handlers		The main.yml file in this directory contains the role's handler definitions
	meta			The main.yml file in this directory contains information about the role,
				including author, license, platforms, and optional role dependencies.
	tasks 			The main.yml file in this directory contains the role's task definitions.
	templates 		This directory contains Jinja2 templates that are referenced by role tasks
	tests			This directory can contain an inventory and test.yml playbook that can be
				used to test the role.
	vars			The main.yml file in this directory defines the role's variable values.
				Often these variables are used for internal purposes within the role. These
				variables have high precedence, and are not intended to be changed when
				used in a playbook.
	---
	- hosts: remote.example.com
	  roles:
	    - role1
	    - role2
	      var1: val1
	      var2: val2
	---
	- name: Play to illustrate order of execution
	  hosts: remote.example.com
	  pre_tasks:
	    - debug:
	        msg: 'pre-task'
	      notify: my handler
	  roles:
	    - role1
	  tasks:
	    - debug:
	        msg: 'first task'
	      notify: my handler
	  post_tasks:
	    - debug:
	        msg: 'post-task'
	      notify: my handler
	  handlers:
	    - name: my handler
	      debug:
		msg: Running my handler
	- name: Execute a role as a task
	  hosts: remote.example.com
	  tasks:
	    - name: A normal task
	      debug:
	        msg: 'first task'
	    - name: A task to include role2 here
	      include_role: role2

	ROLE STRUCTURE
	~/.ansible/roles:/usr/share/ansible/roles:/etc/ansible/roles
	roles/
	└── motd
		├── defaults
		│ └── main.yml
		├── files
		├── handlers
		├── meta
		│ └── main.yml
		├── README.md
		├── tasks
		│ └── main.yml
		└── templates
			└── motd.j2

	ANSIBLE-GALAXY
	Create directory structure
		ansible-galaxy init my_new_role
		ls my_new_role
	--- roles/motd/tasks/main.yml
	# tasks file for motd
	- name: deliver motd file
	  template:
	    src: motd.j2
	    dest: /etc/motd
	    owner: root
	    group: root
	    mode: 0444	
	/roles/motd/templates/motd.j2
	This is the system {{ ansible_facts['hostname'] }}.
	Today's date is: {{ ansible_facts['date_time']['date'] }}.

	Only use this system with permission.
	You can ask {{ system_owner }} for access.
	
	/defaults/main.yml (values)
	---
	system_owner: user@host.example.com

	/meta/main.yml
	---
	dependencies:
	  - role: apache
	    port: 8080
	  - role: postgres
	    dbname: serverlist
	    admin_user: felix
	
	---
	- name: use motd role playbook
	  hosts: remote.example.com
	  user: devops
	  become: true
	  roles:
	    - motd

	OVERWRITTEN ROLE BEHAVIOR
	---
	- name: use motd role playbook
	  hosts: remote.example.com
	  user: devops
	  become: true
	  vars:
	    system_owner: someone@host.example.com
	  roles:
	    - role: motd

	---
	- name: use motd role playbook
	  hosts: remote.example.com
	  user: devops
	  become: true
	  roles:
	    - role: motd
	      system_owner: someone@host.example.com

	DEPLOY ROLES WITH ANSIBLE
	1. ansible-galaxy search <name roles> -p roles
        2. ansible-galaxy list <name roles> -p roles
        3. ansible-galaxy install <name roles> -p roles
	--- [roles/requirement.yml]
	- src: <name role>
          version: "1.5.0"
          name: <custom name>

        ---
        - src: https://gitlab or git@gitlab
          scm: git
          version: 41241 or master
          name: nginx-acme-ssh

        ---
        - src: file:///opt/local/roles/myrole.tar
          name: myrole

	RHEL System Roles
	NAME 				STATE 			ROLE DESCRIPTION
	rhel-system-roles.kdump 	Fully Supported 	Configures the kdump crash
								recovery service.
	rhel-system-roles.network 	Fully Supported 	Configures network interfaces.
	rhel-system-roles.selinux 	Fully Supported 	Configures and manages SELinux
								customization, including SELinux
								mode, file and port contexts,
								Boolean settings, and SELinux
								users.
	rhel-system-roles.timesync 	Fully Supported 	Configures time synchronization
								using Network Time Protocol or
								Precision Time Protocol.
	rhel-system-roles.postfix 	Technology		Configures each host as a Mail
					Preview			Transfer Agent using the Postfix
								service.
	rhel-system-roles.firewall 	In Development 		Configures a host's firewall.
	rhel-system-roles.tuned 	In Development 		Configures the tuned service to
								tune system performance.

	1.  subscription-manager repos --enable rhel-7-server-extras-rpms
	2.  yum install rhel-system-roles
	3.  ls -l /usr/share/ansible/roles/

	--- [rhel-system-roles.timesync]
	- name: Time Synchronization Play
	  hosts: servers
	  vars:
	    timesync_ntp_servers:
	      - hostname: 0.rhel.pool.ntp.org
	        iburst: yes
              - hostname: 1.rhel.pool.ntp.org
                iburst: yes
              - hostname: 2.rhel.pool.ntp.org
                iburst: yes
            timezone: UTC

          roles:
	    - rhel-system-roles.timesync
	  
	  tasks:
	    - name: Set timezone
              timezone:
                name: "{{ timezone }}"

	[root@host playbook-project]# tree.
	├── ansible.cfg
	├── group_vars
	│ └── servers
	│ └── timesync.yml (1)
	├── inventory
	└── timesync_playbook.yml (2)
	(1)
	timesync_ntp_servers:
	 - hostname: 0.rhel.pool.ntp.org
	 iburst: yes
	 - hostname: 1.rhel.pool.ntp.org
	 iburst: yes
	 - hostname: 2.rhel.pool.ntp.org
	 iburst: yes
	timezone: UTC
	(2)
	 hosts: servers
	 roles:
	   - rhel-system-roles.timesync
	 tasks:
	   - name: Set timezone
	       timezone:
	         name: "{{ timezone }}"

	--- [rhel-system-roles.selinux]
	- name: Apply SELinux role
	  block:
	  - include_role:
 	      name: rhel-system-roles.selinux
 	  rescue:
 	    - name: Check for failure for other reasons than required reboot
 	      fail:
              when: not selinux_reboot_required
 
	    - name: Restart managed host
	      reboot:
	        
	    - name: Reapply SELinux role to complete changes
	      include_role:
                name: rhel-system-roles.selinux

	selinux_state: enforcing
	selinux_booleans:
	  - name: 'httpd_enable_homedirs'
	    state: 'on'
	    persistent: 'yes'
	selinux_fcontexts:
	  - target: '/srv/www(/.*)?'
	    setype: 'httpd_sys_content_t'
 	    state: 'present'
	selinux_restore_dirs:
	  - /srv/www
	selinux_ports:
	  - ports: '82'
 	    setype: 'http_port_t'
	    proto: 'tcp'
	    state: 'present'
	
