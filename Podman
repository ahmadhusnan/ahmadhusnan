PODMAN
======
Containers : encapsulated process that includes runtimes dependencies for the program (own libraries)

Preparation of Ports
sudo firewall-cmd --add-port=6443/tcp --permanent
sudo firewall-cmd --reload

Installation
	1. yum -y install podman

	IMAGES
	repository made up of multiple layers (dockerfile)
	LISTING IMAGES
		1. podman search <image>
		2. podman images
		3. podman inspect <Image ID or Repository>
		4. podman top <ID>
		5. podman ps --all --format=json
		6. podman --rm <imagename>
		7. podman port
	BASE IMAGE (UBI)
	Standard 	= include DNF, systemd, gzip and tar
	Init		= eases running multiple applications within a single container by managing them with systemd
	Minimal		= uses microdnf package
	Micro		= not include package manager
	
	PULL IMAGES
		/etc/containers/registries.conf
		unqualified-search-registries = ['registry.redhat.io', 'docker.io'] 
		or
		location (~/.local/share/containers)		="docekr.io"
		blocked=true
		1. podman pull <image:tag>
		TAG IMAGE
			1. podman tag <registry/name> <new/name>

	CREDENTIALS
	registry.redhat.io 		= login
	1. podman login registry.redhat.io
	registry.access.redhat.com 	= no auth
	location (encoded base64)	= ${XDG_RUNTIME_DIR}/containers/auth.json
	PUSH IMAGES
		1. podman login <registry> ex. docker.io quay.io
		2. podman push <new/name>
		
	SAVE IMAGES
		1. podman save <name.tar> <image:tag>
		compressed
		2. podman save <image:tag> | gzip > <name.tar.gz>
		
	PODMAN IMAGES
	copy image to other server
		1. podman load -i openshift.tar
		or
		1. podman load < <name.tar>
		compressed
		2. gunzip -c <name.tar.gz> | podman load

	BUILD IMAGES
	1. podman build -t <service name> <https://github>
	2. Uses ContainerFile
		FROM <registry base image>
		WORKDIR <Working dir>
		COPY <Copy file from host to working container dir>
		ADD <like copy but it unpaced .tar or linkfile>
		RUN <run command and commits the resulting state to new layer (STEP)>
		ENTRYPOINT <Sets the executable to run when started>
		CMD <command when the container is started ex. bash>
		USER <state user>
		LABEL <add key-value pair to metadata>
		EXPOSE <add port bind for container>
		ENV <define env for container>
		ARG <define build-time variable>
		Volume <define volume store data outside the container>
			EXAMPLE
			# This is a comment line 1
			FROM        registry.redhat.io/ubi8/ubi:8.6 2
			LABEL       description="This is a custom httpd container image" 3
			RUN         yum install -y httpd 4
			EXPOSE      80 5
			ENV         LogLevel "info" 6
			ADD         http://someserver.com/filename.pdf /var/www/html 7
			COPY        ./src/   /var/www/html/ 8
			USER        apache 9
			ENTRYPOINT  ["/usr/sbin/httpd", "param2", "param3"] 10
			CMD         ["-D", "FOREGROUND"] 11

			# First stage
			FROM registry.access.redhat.com/ubi8/nodejs-14:1 as builder 1
			COPY ./ /opt/app-root/src/
			RUN npm install
			RUN npm run build 2

			# Second stage
			FROM registry.access.redhat.com/ubi8/nodejs-14-minimal:1 3
			COPY --from=builder /opt/app-root/src/ /opt/app-root/src/ 4
			EXPOSE 8080
			CMD node dist/index.js	

	EXEC PODS
		1. podman exec <option>container <container>
		option : --env --interactive --tty(pseudoterminal)  --latest(container)
		ex
		podman exec httpd cat /etc/httpd/conf/httpd.conf

	COPY FILES FROM CONTAINER OUT
		1. podman cp <podname>:/dir /targetdir

	RUNNING IMAGES
		1. podman run <image ID>
		in background
		2. podman run -d <image ID>
		exposed port
		3. podman run -dit -p 80:80 <image ID> = ip 0.0.0.0
		   podman run -dit -p 127.0.0.1:8075:80 <imageID>
		4. podman port <imageID> 
		   podman port --all
		5. podman inspect my-app \
			 -f '{{.NetworkSettings.Networks.apps.IPAddress}}'
		ROOTLESS by using -u
		7. podman run -it -u <user> <image> /bin/bash
		state env
		8. podman run -e NAME='Red Hat' <Image> printenv NAME
		
	REMOVE IMAGES
		1. podman rmi <image ID>
		
		CONTAINER 
		Listing Container
			1. podman -ps -a
			search
			2. podman search registry/container_image
			ex : podman search registry.redhat.io/redis
		STOP and REMOVE Container
			1. podman stop <contaner ID>
			2. podman rm <container ID>
			
		RUNNING CONTAINER
		Persistent storage in server bare metal or VM
			store file interactively
				1. podman run --privileged -it -v </localhost dir>:</container dir> <name image/repo> /bin/bash
		
			POD
				1. podman pod create
					--cgroup-parent value 	= parent c group
 					--infra 		= group infra container
					--infra-command 	= command run in infra container
					--infra-image 		= infra container image
					--label 		= metadata pod
					--name 			= assign new name
					--publish		= publish container port or range ports
				2. podman pod list
			
			Running pod or assign pod with service
				1. podman run -dt --pod <pod name> -p <port> <container> <container command>
			
			List
				1. podman ps -a --
			
			Start & Stop POD
				1. podman start <ID>
				2. podman stop <ID>
				
			Execute pod
				1. podman exec -it <ID>  /bin/bash
			 
	PODMAN NETWORK
	1. podman network create
	ex
		podman network create example-net
	2. podman network ls
	3. podman network inspect
	4. podman network rm
	5. podman network prune
	6. podman network connect
	ex
		podman run -d --name my-container --net example-net <container-image:latest>
		podman run -d --name double-connector --net postgres-net,redis-net <contianer-image:latest>
		curl <http://nginx-host:8080>
	
