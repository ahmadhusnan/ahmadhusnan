OPENSHIFT
=========
COMPONENT BASED ON KUBERNETES
	kube-proxy			= maintain network between kubernetes resources
	kube-controller-manager		= Governs the state of the cluster
	kube-scheduler			= Allocate pods
	etcd				= Stores cluster data
	kube-apiserver			= Validates and configures data for the API objects
	kubelet				= Read container manifest (makesure container started and running)
	kubectl				= command to interact with kube-apiserver
	container runtime		= install podman / docker
	container-registry		= Stores and accessed container images
	pod				= smallest logical unit in kubernetes, contain one or more containers
	
SCALLING
	HORIZONTAL 			= deploy more instance
	VERTICAL			= Upgrade spek
	
FLOW
USER >>> Controller node (API server) >>> Worker Node {1..3} (Kubelet+Pods)
Contoller node			Compute Node			Storage/Registy
kube-apiserver			kubelet				PV storage
kube-scheduler			kube-proxy			Container registry
kube-controller-manager		CONTAINER RUNTIME
					Container
					Pods
----------------------------------------------------------------------------------
Physical			Virtual				Cloud

KUBERNETES RESOURCES
	Service				= expose a running application on a set of pods
	ReplicaSets			= maintain the constant pod number
	Deployment			= maintain the life cycle of an application

CLI
INSTALL OPENSHIFT CLIENT IN DESKTOP
	1. Download openshift client from redhat
		download
		- curl -LO "https://dl.k8s.io/release/$(curl -L \
  			-s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
		checksum
		- curl -LO "https://dl.k8s.io/$(curl -L \
			-s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
		check
		- echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
		install
		- sudo install -o root -g root -m 0755 kubectl \
  			/usr/local/bin/kubectl
	2. tar xvzf <file>
	3. echo $PATH
	4. mv <file> to $PATH directory
	
LOGIN
	LOGIN OCP only
	1. oc login -u user1
	LOGIN TO PROJECT
	2. oc login <optional HTTP/HTTPS/No proxy> -u user1
	3. oc cluster-info
	4. oc api-versions
	5. oc get clusteroperator
	
PROJECT
	1. oc new-project <project name>
	2. oc projects
	3. oc status
	
POLICY
	1. oc adm policy add-role-to-user <admin> <nama_user/iduser> -n <prod-mashery>
	   for f in nama/id_user nama/id_user nama/id_user; do oc adm policy \
	   add-role-to-user admin $f -n <prod-mashery>; done;
	2. oc get rolebindings -owide -n <prod-mashery> | grep nama/id_usr
	
APPLICATION
	1. oc new-app <Image link/Container link>
	2. oc create route edge <name route> --service=<name service>
	3. oc get all

OPERATOR
	1. oc get clusteroperator / oc get co
	2. oc describe clusteroperator <operator name>
	3. oc explain
	
VIEW PODS
	1. oc get pods -o wide -A (all namespaces)
		i. oc get pod -A --sort-by='{.metadata.creationTimestamp}'
	2. oc logs <pod name>
	3. oc describe pods <pod name>
	4. oc get service
	5. oc get pods <pods name> -o yaml
	6. oc explain
	
DELETE PODS
	1. oc delete pod <name pod> -n <namespace>
	2. ns=<NAMESPACE>; for i in $(oc get pod -n $ns | grep -i completed | awk '{print $1}'); do oc delete pod $i -n $ns;done
	
SCALING THE APPLICATION
	1. oc scale --current-replicas=1 --replicas=2 deployment/parksmap
	
	DEPLOY BACK-END SERVICE(Python)
		1. oc new-app python~https://github.com/openshift-roadshow/nationalparks-py.git --name nationalparks -l 'app=national-parks-app,component=nationalparks,role=backend,app.kubernetes.io/part-of=national-parks-app,app.kubernetes.io/name=python' --allow-missing-images=true
	CONNECTING TO A DATABASE
		1. oc new-app quay.io/centos7/mongodb-36-centos7 --name mongodb-nationalparks -e MONGODB_USER=mongodb -e MONGODB_PASSWORD=mongodb -e MONGODB_DATABASE=mongodb -e MONGODB_ADMIN_PASSWORD=mongodb -l 'app.kubernetes.io/part-of=national-parks-app,app.kubernetes.io/name=mongodb'
	SECRET
		1. oc create secret generic nationalparks-mongodb-parameters --from-literal=DATABASE_SERVICE_NAME=mongodb-nationalparks --from-literal=MONGODB_USER=mongodb --from-literal=MONGODB_PASSWORD=mongodb --from-literal=MONGODB_DATABASE=mongodb --from-literal=MONGODB_ADMIN_PASSWORD=mongodb
		2. oc set env --from=secret/nationalparks-mongodb-parameters deploy/nationalparks
		3. oc rollout status deployment nationalparks
		4. oc rollout status deployment mongodb-nationalparks
		
	DEPLOY MYSQL
		1. oc new-app mysql MYSQL_USER=user1 MYSQL_PASSWORD=mypa55 MYSQL_DATABASE=testdb -l db=mysql
	DEPLOY From Docker
		1. oc new-app --docker-image=docker.io/indr01/nama_image:tag --name=nama_app
	DEPLOY From Github
		1. oc new-app https://github.com/openshift/ruby-hello-world --name=ruby-hello
		
ANY UID
	1. oc create sa anyuid-nama_pod
	   ex: oc create sa anyuid-httpd
	oc adm policy add-scc-to-user anyuid -t anyuid-nama_pod
	   ex: oc adm policy add-scc-to-user anyuid -z httpd
Perintah di atas akan memberikan role "AnyUID" kepada pod dengan nama "my-pod". Anda juga dapat menggunakan perintah oc adm policy add-scc-to-group untuk memberikan role "AnyUID" kepada sekelompok pod.

oc adm set sa dc/httpd anyuid-httpd
oc logs nama_pods //melihat logs
contoh : oc logs httpd-2-cbs29

API-RESOURCES
	1. oc api-resources
	
IMPORT-IMAGE
	1. oc import-image my-ruby
	
BUILD 
	1. oc new build <Git directory>
		from build config
		1. oc start-build python

DEPLOY
	CREATE DEPLOY
		1. kubectl apply -f <file/filedir/adress>.yaml
			REQ FIELD
			1. apiVersion			= v1/v2/v3
			2. kind				= Deployment
			3. metadata
				1. name
				2. UID
				3. namespace
			4. spec
		2. kubectl get deployments
	ROLLOUT
		3. kubectl rollout status deployment/<deployment-name>
	REPLICASET
		4. kubectl get rs
		ex : [deployment]-[name]-[hash]
		nginx-deployment-979797
	LABEL
		5. kubectl get pods --show-labels
	UPDATE DEPLOYMENT
		6. kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.16.1
	DESCRIBE DEPLOYMENT
		7. kubectl describe deployments
	SCALING
		8. kubectl scale deployment/<deplyoment name> --replicas=10 
		if horizontal pos scalling enabled
			kubectl scale deployment/<deployment name> --min=10 --max=15 --cpu-percent=80
	
TAG
	1. oc tag ruby:latest ruby:2.0

RESOURCE
	Types:
	1. pod (Pods)
	2. svc (Services)
	3. rs (ReplicaSet)
	4. pv (Persitent Volumes)
	5. pvc (Persistent Volume Claims)
	6. cm (ConfigMaps) and Secrets
	7. deploy (Deployment)
	8. bc (BuildConfig)
	9. dc (DeploymentConfig)
	10. routes
	every resource has .kind .apiVersion .status
	ex:
		pod.kind pod.api.Version .status
	Command:
	1. oc api-resources
	ex:
		oc api-resources --namespaced=true --api-group apps --sort-by name
		
APPLY CONFIG
	1. oc apply -f pod.json
	2. oc create -f pod.json
	3. oc delete pod/<podname>
	4. oc delete pods -l app=parksmap-katacoda
	
AUTOSCALE
	1. oc autoscale deploymentconfig/parksmap-katacoda --min=2 --max=5

ROLLBACK
	1. oc rollback php (--to-version=3)
	
ROLLOUT
	1. oc rollout undo deploymentconfig/php
	
EDIT
	1. oc edit deploymentconfig/<podname>
	2. OC_EDITOR="nano" oc edit deploymentconfig/<podname>
	3. oc edit deploymentconfig/<podname> -o json
	
EXPOSE
	1. oc expose service/<podname>
	2. oc expose service/<podname> --hostname=www.my-host.com
	
GET
	1. oc get pods -n default
	2. oc get nodes
	3. oc get deploymentconfig/python -o json
	
HELP
	1. oc help 
	or
	oc create --help
	2. oc explain pods
	
LOGOUT
	1. oc logout
